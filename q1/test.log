*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test1.ll'
source_filename = "test1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"error\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}

declare i32 @printf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'test1.ll'
source_filename = "test1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"error\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}

declare i32 @printf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}

declare i32 @__isoc99_scanf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @FB(i32* noundef %0, i32* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32*, i32** %5, align 8
  store i32 %10, i32* %11, align 4
  %12 = load i32*, i32** %7, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load i32*, i32** %6, align 8
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %13, %15
  %17 = load i32*, i32** %6, align 8
  store i32 %16, i32* %17, align 4
  %18 = load i32*, i32** %6, align 8
  %19 = load i32, i32* %18, align 4
  %20 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %19)
  %21 = load i32*, i32** %5, align 8
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %7, align 8
  store i32 %22, i32* %23, align 4
  %24 = load i32*, i32** %8, align 8
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 1
  %27 = load i32*, i32** %8, align 8
  store i32 %26, i32* %27, align 4
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function FB: IsSSA, TracksLiveness

# End machine code for function FB.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY $rcx
32B	  %4:gr64 = COPY $rdx
48B	  %2:gr64 = COPY $rsi
64B	  %0:gr64 = COPY $rdi
80B	  %1:gr64 = COPY killed %0:gr64
96B	  %3:gr64 = COPY killed %2:gr64
112B	  %5:gr64 = COPY killed %4:gr64
128B	  %7:gr64 = COPY killed %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
336B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
352B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
368B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
384B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
400B	  %22:gr64 = MOV64ri @.str
416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  $rdi = COPY %22:gr64
448B	  $esi = COPY %26:gr32
464B	  $al = MOV8ri 0
480B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  %24:gr32 = COPY $eax
528B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
544B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
560B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
576B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
592B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
608B	  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
624B	  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
640B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
656B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
672B	  RET64

# End machine code for function FB.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY $rcx
32B	  %4:gr64 = COPY $rdx
48B	  %2:gr64 = COPY $rsi
64B	  %0:gr64 = COPY $rdi
80B	  %1:gr64 = COPY killed %0:gr64
96B	  %3:gr64 = COPY killed %2:gr64
112B	  %5:gr64 = COPY killed %4:gr64
128B	  %7:gr64 = COPY killed %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
336B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
352B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
368B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
384B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
400B	  %22:gr64 = MOV64ri @.str
416B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
432B	  $rdi = COPY %22:gr64
448B	  $esi = COPY %26:gr32
464B	  $al = MOV8ri 0
480B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
496B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  %24:gr32 = COPY $eax
528B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
544B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
560B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
576B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
592B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
608B	  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
624B	  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
640B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
656B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
672B	  RET64

# End machine code for function FB.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY $rcx
  %4:gr64 = COPY $rdx
  %2:gr64 = COPY $rsi
  %0:gr64 = COPY $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm %37:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %22:gr64
  $esi = COPY %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %24:gr32 = COPY $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 %14:gr32(tied-def 0), 1, implicit-def $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm killed %37:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function FB: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm killed %37:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function FB: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm killed %37:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function FB: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = ADD32rm killed %37:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = ADD32ri8 killed %14:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = COPY killed %37:gr32
  %33:gr32 = ADD32rm %33:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = COPY killed %14:gr32
  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

bb.0 (%ir-block.4):
  liveins: $rdi, $rsi, $rdx, $rcx
  %6:gr64 = COPY killed $rcx
  %4:gr64 = COPY killed $rdx
  %2:gr64 = COPY killed $rsi
  %0:gr64 = COPY killed $rdi
  %1:gr64 = COPY killed %0:gr64
  %3:gr64 = COPY killed %2:gr64
  %5:gr64 = COPY killed %4:gr64
  %7:gr64 = COPY killed %6:gr64
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %33:gr32 = COPY killed %37:gr32
  %33:gr32 = ADD32rm %33:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  %22:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %22:gr64
  $esi = COPY killed %26:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %24:gr32 = COPY killed $eax
  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  %12:gr32 = COPY killed %14:gr32
  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY killed $rcx
32B	  %4:gr64 = COPY killed $rdx
48B	  %2:gr64 = COPY killed $rsi
64B	  %0:gr64 = COPY killed $rdi
80B	  %1:gr64 = COPY killed %0:gr64
96B	  %3:gr64 = COPY killed %2:gr64
112B	  %5:gr64 = COPY killed %4:gr64
128B	  %7:gr64 = COPY killed %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = COPY killed %37:gr32
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY killed %22:gr64
464B	  $esi = COPY killed %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
640B	  %12:gr32 = COPY killed %14:gr32
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY killed $rcx
32B	  %4:gr64 = COPY killed $rdx
48B	  %2:gr64 = COPY killed $rsi
64B	  %0:gr64 = COPY killed $rdi
80B	  %1:gr64 = COPY killed %0:gr64
96B	  %3:gr64 = COPY killed %2:gr64
112B	  %5:gr64 = COPY killed %4:gr64
128B	  %7:gr64 = COPY killed %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm killed %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed %41:gr64, 1, $noreg, 0, $noreg, killed %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm killed %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = COPY killed %37:gr32
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), killed %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed %30:gr64, 1, $noreg, 0, $noreg, killed %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm killed %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY killed %22:gr64
464B	  $esi = COPY killed %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm killed %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed %18:gr64, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %14:gr32 = MOV32rm killed %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
640B	  %12:gr32 = COPY killed %14:gr32
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed %10:gr64, 1, $noreg, 0, $noreg, killed %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY $rcx
32B	  %4:gr64 = COPY $rdx
48B	  %2:gr64 = COPY $rsi
64B	  %0:gr64 = COPY $rdi
80B	  %1:gr64 = COPY %0:gr64
96B	  %3:gr64 = COPY %2:gr64
112B	  %5:gr64 = COPY %4:gr64
128B	  %7:gr64 = COPY %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = COPY %37:gr32
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
640B	  %12:gr32 = COPY %14:gr32
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %6:gr64 = COPY $rcx
32B	  %4:gr64 = COPY $rdx
48B	  %2:gr64 = COPY $rsi
64B	  %0:gr64 = COPY $rdi
80B	  %1:gr64 = COPY %0:gr64
96B	  %3:gr64 = COPY %2:gr64
112B	  %5:gr64 = COPY %4:gr64
128B	  %7:gr64 = COPY %6:gr64
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %37:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
320B	  %33:gr32 = COPY %37:gr32
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %14:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
640B	  %12:gr32 = COPY %14:gr32
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY killed $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi in %0, $rsi in %2, $rdx in %4, $rcx in %6

0B	bb.0 (%ir-block.4):
	  liveins: $rdi, $rsi, $rdx, $rcx
16B	  %7:gr64 = COPY $rcx
32B	  %5:gr64 = COPY $rdx
48B	  %3:gr64 = COPY $rsi
64B	  %1:gr64 = COPY $rdi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1:gr64 :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3:gr64 :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5:gr64 :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7:gr64 :: (store (s64) into %ir.8)
208B	  %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  %43:gr32 = MOV32rm %44:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  %41:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr %41:gr64, 1, $noreg, 0, $noreg, %43:gr32 :: (store (s32) into %ir.11)
272B	  %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  %33:gr32 = MOV32rm %38:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  %35:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  %33:gr32 = ADD32rm %33:gr32(tied-def 0), %35:gr64, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr %30:gr64, 1, $noreg, 0, $noreg, %33:gr32 :: (store (s32) into %ir.17)
384B	  %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  %26:gr32 = MOV32rm %27:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  %22:gr64 = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $rdi = COPY %22:gr64
464B	  $esi = COPY %26:gr32
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
528B	  dead %24:gr32 = COPY $eax
544B	  %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  %20:gr32 = MOV32rm %21:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr %18:gr64, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.23)
608B	  %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  %12:gr32 = MOV32rm %15:gr64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  %12:gr32 = ADD32ri8 %12:gr32(tied-def 0), 1, implicit-def dead $eflags
672B	  %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr %10:gr64, 1, $noreg, 0, $noreg, %12:gr32 :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

0B	bb.0 (%ir-block.4):
	  liveins: $rcx, $rdi, $rdx, $rsi
144B	  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
160B	  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
176B	  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
192B	  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
208B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
224B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
240B	  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
256B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
272B	  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
288B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
304B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
336B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
352B	  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
368B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
384B	  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
400B	  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
416B	  renamable $rdi = MOV64ri @.str
432B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  $al = MOV8ri 0
496B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
512B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
560B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
576B	  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
592B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
608B	  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
624B	  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
656B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
672B	  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
688B	  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
704B	  RET64

# End machine code for function FB.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rax = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  RET64

# End machine code for function FB.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function FB: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-40]
  fi#1: size=8, align=8, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-24]
Function Live Ins: $rdi, $rsi, $rdx, $rcx

bb.0 (%ir-block.4):
  liveins: $rcx, $rdi, $rdx, $rsi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV64mr $rbp, 1, $noreg, -32, $noreg, killed renamable $rdi :: (store (s64) into %ir.5)
  MOV64mr $rbp, 1, $noreg, -8, $noreg, killed renamable $rsi :: (store (s64) into %ir.6)
  MOV64mr $rbp, 1, $noreg, -24, $noreg, killed renamable $rdx :: (store (s64) into %ir.7)
  MOV64mr $rbp, 1, $noreg, -16, $noreg, killed renamable $rcx :: (store (s64) into %ir.8)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.11)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.12)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), killed renamable $rcx, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.14)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.17)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.6)
  renamable $esi = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $rax = MOV64rm $rbp, 1, $noreg, -32, $noreg :: (load (s64) from %ir.5)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21)
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %ir.7)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.23)
  renamable $rax = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  renamable $eax = MOV32rm killed renamable $rax, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  renamable $rcx = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %ir.8)
  MOV32mr killed renamable $rcx, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.27)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64

# End machine code for function FB.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
16:                                               ; preds = %14, %0
  br label %17

; Loop:
17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
16:                                               ; preds = %14, %0
  br label %17

; Loop:
17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
16:                                               ; preds = %14, %0
  br label %17

; Loop:
17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
16:                                               ; preds = %14, %0
  br label %17

; Loop:
17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

; Exit blocks
22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  %7 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef %6)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %8)
  %10 = load i32, i32* %3, align 4
  %11 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %10)
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  br label %17

17:                                               ; preds = %21, %16
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  call void @FB(i32* noundef %5, i32* noundef %3, i32* noundef %2, i32* noundef %4)
  br label %17, !llvm.loop !6

22:                                               ; preds = %17
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %9:gr64
  $rsi = COPY %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %5:gr64
  $esi = COPY %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %7:gr32 = COPY $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %19:gr64
  $rsi = COPY %20:gr64
  $rdx = COPY %21:gr64
  $rcx = COPY %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %18:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %9:gr64 = MOV64ri @.str.1
  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %9:gr64
  $rsi = COPY killed %10:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %11:gr32 = COPY killed $eax
  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %5:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %5:gr64
  $esi = COPY killed %8:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %7:gr32 = COPY killed $eax
  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %1:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  %12:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %12:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %13:gr32 = COPY killed $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %19:gr64
  $rsi = COPY killed %20:gr64
  $rdx = COPY killed %21:gr64
  $rcx = COPY killed %22:gr64
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %18:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %9:gr64
144B	  $rsi = COPY killed %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY killed %5:gr64
288B	  $esi = COPY killed %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY killed %1:gr64
432B	  $esi = COPY killed %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY killed %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY killed %19:gr64
880B	  $rsi = COPY killed %20:gr64
896B	  $rdx = COPY killed %21:gr64
912B	  $rcx = COPY killed %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY killed %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %9:gr64
144B	  $rsi = COPY killed %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY killed %5:gr64
288B	  $esi = COPY killed %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY killed %1:gr64
432B	  $esi = COPY killed %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY killed %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY killed %19:gr64
880B	  $rsi = COPY killed %20:gr64
896B	  $rdx = COPY killed %21:gr64
912B	  $rcx = COPY killed %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY killed %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY killed $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY killed $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY killed $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY killed $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit killed $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %9:gr64 = MOV64ri @.str.1
96B	  %10:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %9:gr64
144B	  $rsi = COPY %10:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %11:gr32 = COPY $eax
224B	  %8:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  %5:gr64 = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  $rdi = COPY %5:gr64
288B	  $esi = COPY %8:gr32
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
352B	  dead %7:gr32 = COPY $eax
368B	  %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  %1:gr64 = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  $rdi = COPY %1:gr64
432B	  $esi = COPY %4:gr32
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  dead %3:gr32 = COPY $eax
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  %12:gr64 = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  $rdi = COPY %12:gr64
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  dead %13:gr32 = COPY $eax

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm %16:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  %19:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  %20:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  %22:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
864B	  $rdi = COPY %19:gr64
880B	  $rsi = COPY %20:gr64
896B	  $rdx = COPY %21:gr64
912B	  $rcx = COPY %22:gr64
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  %18:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1008B	  $eax = COPY %18:gr32
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str.1
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
240B	  renamable $rdi = MOV64ri @.str
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
304B	  $al = MOV8ri 0
320B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
336B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
384B	  renamable $rdi = MOV64ri @.str
400B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
448B	  $al = MOV8ri 0
464B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
480B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
528B	  JCC_1 %bb.2, 13, implicit killed $eflags

544B	bb.1 (%ir-block.14):
	; predecessors: %bb.0
	  successors: %bb.2

560B	  renamable $rdi = MOV64ri @.str.2
576B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  $al = MOV8ri 0
624B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
640B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

672B	bb.2 (%ir-block.16):
	; predecessors: %bb.0, %bb.1
	  successors: %bb.3

688B	  JMP_1 %bb.3

704B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

720B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
736B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
752B	  JCC_1 %bb.5, 13, implicit killed $eflags

768B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

784B	  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
800B	  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
816B	  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
832B	  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
848B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
928B	  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
944B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  JMP_1 %bb.3

976B	bb.5 (%ir-block.22):
	; predecessors: %bb.3

992B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1024B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi8 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r %stack.4, 1, $noreg, 0, $noreg
  renamable $rsi = LEA64r %stack.2, 1, $noreg, 0, $noreg
  renamable $rdx = LEA64r %stack.1, 1, $noreg, 0, $noreg
  renamable $rcx = LEA64r %stack.3, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str.1
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.2)
  JCC_1 %bb.2, 13, implicit killed $eflags

bb.1 (%ir-block.14):
; predecessors: %bb.0
  successors: %bb.2

  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit-def $eax

bb.2 (%ir-block.16):
; predecessors: %bb.0, %bb.1
  successors: %bb.3

  JMP_1 %bb.3

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $rdi = LEA64r $rbp, 1, $noreg, -24, $noreg
  renamable $rsi = LEA64r $rbp, 1, $noreg, -12, $noreg
  renamable $rdx = LEA64r $rbp, 1, $noreg, -4, $noreg
  renamable $rcx = LEA64r $rbp, 1, $noreg, -8, $noreg
  CALL64pcrel32 @FB, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
  JMP_1 %bb.3

bb.5 (%ir-block.22):
; predecessors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

