
;; Function FB (FB, funcdef_no=0, decl_uid=2348, cgraph_uid=1, symbol_order=0)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =rm  (1) %0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 33:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 40: point = 0, n_alt = -1
   Insn 35: point = 0, n_alt = 1
   Insn 34: point = 1, n_alt = 3
   Insn 33: point = 2, n_alt = 3
   Insn 32: point = 4, n_alt = 0
   Insn 31: point = 6, n_alt = 3
   Insn 30: point = 7, n_alt = 1
   Insn 29: point = 8, n_alt = 3
   Insn 28: point = 9, n_alt = 0
   Insn 27: point = 11, n_alt = 3
   Insn 26: point = 12, n_alt = 0
   Insn 25: point = 12, n_alt = 3
   Insn 24: point = 12, n_alt = -2
   Insn 23: point = 13, n_alt = 4
   Insn 22: point = 14, n_alt = -2
   Insn 21: point = 15, n_alt = 0
   Insn 20: point = 17, n_alt = 3
   Insn 19: point = 18, n_alt = 1
   Insn 18: point = 19, n_alt = 3
   Insn 17: point = 20, n_alt = 0
   Insn 16: point = 22, n_alt = 0
   Insn 15: point = 24, n_alt = 3
   Insn 14: point = 25, n_alt = 0
   Insn 13: point = 27, n_alt = 3
   Insn 12: point = 28, n_alt = 1
   Insn 11: point = 29, n_alt = 3
   Insn 10: point = 30, n_alt = 0
   Insn 9: point = 32, n_alt = 3
   Insn 5: point = 33, n_alt = 5
   Insn 4: point = 33, n_alt = 5
   Insn 3: point = 33, n_alt = 5
   Insn 2: point = 33, n_alt = 5
 r82: [28..30]
 r83: [21..25]
 r84: [21..22]
 r85: [18..20]
 r86: [14..15]
 r87: [7..9]
 r88: [3..4]
 r89: [0..2]
 r90: [31..32]
 r91: [28..29]
 r92: [26..27]
 r93: [23..24]
 r94: [18..19]
 r95: [16..17]
 r96: [12..13]
 r97: [10..11]
 r98: [7..8]
 r99: [5..6]
 r100: [0..1]
Compressing live ranges: from 33 to 28 - 84%
Ranges after the compression:
 r82: [24..25]
 r83: [18..21]
 r84: [18..19]
 r85: [16..17]
 r86: [12..13]
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [26..27]
 r91: [24..25]
 r92: [22..23]
 r93: [20..21]
 r94: [16..17]
 r95: [14..15]
 r96: [10..11]
 r97: [8..9]
 r98: [6..7]
 r99: [4..5]
 r100: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 12
changing reg in insn 14
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 35
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
starting the processing of deferred insns
ending the processing of deferred insns


FB

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,15u} r1={7d,6u} r2={2d,1u} r4={3d,2u} r5={3d,2u} r6={1d,16u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={3d} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 155{109d,46u,0e} in 32{31 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])
        (reg:DI 5 di [ t ])) "test1.c":5:37 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])
        (reg:DI 4 si [ b ])) "test1.c":5:37 74 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])
        (reg:DI 1 dx [ a ])) "test1.c":5:37 74 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])
        (reg:DI 2 cx [ i ])) "test1.c":5:37 74 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":6:8 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 dx [orig:82 _1 ] [82])
        (mem:SI (reg/f:DI 0 ax [90]) [2 *b_10(D)+0 S4 A32])) "test1.c":6:8 75 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])) "test1.c":6:7 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:DI 0 ax [91]) [2 *t_11(D)+0 S4 A32])
        (reg:SI 1 dx [orig:82 _1 ] [82])) "test1.c":6:7 75 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])) "test1.c":7:8 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 dx [orig:83 _2 ] [83])
        (mem:SI (reg/f:DI 0 ax [92]) [2 *a_13(D)+0 S4 A32])) "test1.c":7:8 75 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":7:11 74 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [orig:84 _3 ] [84])
        (mem:SI (reg/f:DI 0 ax [93]) [2 *b_10(D)+0 S4 A32])) "test1.c":7:11 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 1 dx [orig:85 _4 ] [85])
                (plus:SI (reg:SI 1 dx [orig:83 _2 ] [83])
                    (reg:SI 0 ax [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":7:10 209 {*addsi_1}
     (nil))
(insn 18 17 19 2 (set (reg/f:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":7:7 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (reg/f:DI 0 ax [94]) [2 *b_10(D)+0 S4 A32])
        (reg:SI 1 dx [orig:85 _4 ] [85])) "test1.c":7:7 75 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":8:5 74 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:86 _5 ] [86])
        (mem:SI (reg/f:DI 0 ax [95]) [2 *b_10(D)+0 S4 A32])) "test1.c":8:5 75 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:86 _5 ] [86])) "test1.c":8:5 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 0 ax [96])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":8:5 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "test1.c":8:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
        (nil)))
(insn 25 24 26 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":8:5 77 {*movqi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":8:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])) "test1.c":9:8 74 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 1 dx [orig:87 _6 ] [87])
        (mem:SI (reg/f:DI 0 ax [97]) [2 *t_11(D)+0 S4 A32])) "test1.c":9:8 75 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])) "test1.c":9:7 74 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 0 ax [98]) [2 *a_13(D)+0 S4 A32])
        (reg:SI 1 dx [orig:87 _6 ] [87])) "test1.c":9:7 75 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg/f:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])) "test1.c":10:8 74 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 0 ax [orig:88 _7 ] [88])
        (mem:SI (reg/f:DI 0 ax [99]) [2 *i_17(D)+0 S4 A32])) "test1.c":10:8 75 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (parallel [
            (set (reg:SI 1 dx [orig:89 _8 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 _7 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":10:10 209 {*addsi_1}
     (nil))
(insn 34 33 35 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])) "test1.c":10:7 74 {*movdi_internal}
     (nil))
(insn 35 34 40 2 (set (mem:SI (reg/f:DI 0 ax [100]) [2 *i_17(D)+0 S4 A32])
        (reg:SI 1 dx [orig:89 _8 ] [89])) "test1.c":10:7 75 {*movsi_internal}
     (nil))
(insn 40 35 41 2 (const_int 0 [0]) "test1.c":11:5 843 {nop}
     (nil))
(note 41 40 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=1, decl_uid=2350, cgraph_uid=2, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 9:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 42:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 43:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 44:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 45:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 8
   Insn 68: point = 0, n_alt = 0
  BB 9
   Insn 72: point = 0, n_alt = -1
   Insn 71: point = 0, n_alt = -2
  BB 7
   Insn 67: point = 2, n_alt = -1
   Insn 66: point = 2, n_alt = 0
   Insn 62: point = 4, n_alt = -2
   Insn 59: point = 6, n_alt = 0
  BB 6
   Insn 57: point = 7, n_alt = -1
   Insn 56: point = 7, n_alt = 0
   Insn 54: point = 8, n_alt = 0
   Insn 53: point = 9, n_alt = 0
  BB 4
   Insn 76: point = 10, n_alt = -1
  BB 3
   Insn 36: point = 10, n_alt = 0
   Insn 35: point = 10, n_alt = 3
   Insn 34: point = 10, n_alt = -2
   Insn 33: point = 11, n_alt = 4
  BB 2
   Insn 31: point = 12, n_alt = -1
   Insn 30: point = 12, n_alt = 0
   Insn 27: point = 13, n_alt = 0
   Insn 26: point = 14, n_alt = 0
   Insn 25: point = 14, n_alt = 3
   Insn 24: point = 14, n_alt = -2
   Insn 23: point = 15, n_alt = 4
   Insn 22: point = 16, n_alt = -2
   Insn 21: point = 17, n_alt = 0
   Insn 20: point = 18, n_alt = 0
   Insn 19: point = 18, n_alt = 3
   Insn 18: point = 18, n_alt = -2
   Insn 17: point = 19, n_alt = 4
   Insn 16: point = 20, n_alt = -2
   Insn 15: point = 21, n_alt = 0
   Insn 14: point = 22, n_alt = 0
   Insn 13: point = 22, n_alt = 3
   Insn 12: point = 22, n_alt = -2
   Insn 11: point = 23, n_alt = 4
   Insn 10: point = 24, n_alt = -2
   Insn 9: point = 25, n_alt = 3
   Insn 8: point = 26, n_alt = 1
   Insn 7: point = 26, n_alt = 1
   Insn 6: point = 26, n_alt = 1
   Insn 3: point = 26, n_alt = 0
  BB 5
   Insn 50: point = 28, n_alt = 0
   Insn 49: point = 28, n_alt = -2
   Insn 48: point = 29, n_alt = -2
   Insn 47: point = 30, n_alt = -2
   Insn 46: point = 31, n_alt = -2
   Insn 45: point = 32, n_alt = 3
   Insn 44: point = 33, n_alt = 3
   Insn 43: point = 34, n_alt = 3
   Insn 42: point = 35, n_alt = 3
 r82: [20..21]
 r83: [16..17]
 r84: [12..13]
 r85: [7..9]
 r86: [7..8]
 r87: [5..6]
 r88: [0..4]
 r89: [24..25]
 r90: [22..23]
 r91: [18..19]
 r92: [14..15]
 r93: [10..11]
 r94: [31..35]
 r95: [30..34]
 r96: [29..33]
 r97: [28..32]
 r99: [26..27]
 r100: [2..3]
Compressing live ranges: from 36 to 26 - 72%
Ranges after the compression:
 r82: [16..17]
 r83: [12..13]
 r84: [8..9]
 r85: [4..5]
 r86: [4..5]
 r87: [2..3]
 r88: [0..1]
 r89: [20..21]
 r90: [18..19]
 r91: [14..15]
 r92: [10..11]
 r93: [6..7]
 r94: [24..25]
 r95: [24..25]
 r96: [24..25]
 r97: [24..25]
 r99: [22..23]
 r100: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 30
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 56
changing reg in insn 59
changing reg in insn 62
changing reg in insn 62
changing reg in insn 71
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 24
changing reg in insn 33
changing reg in insn 34
changing reg in insn 42
changing reg in insn 46
changing reg in insn 43
changing reg in insn 47
changing reg in insn 44
changing reg in insn 48
changing reg in insn 45
changing reg in insn 49
changing reg in insn 3
changing reg in insn 66
deleting insn with uid = 46.
deleting insn with uid = 47.
deleting insn with uid = 48.
deleting insn with uid = 62.
deleting insn with uid = 71.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={23d,16u} r1={10d,2u} r2={8d,1u} r4={11d,4u} r5={12d,5u} r6={1d,24u} r7={1d,15u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={15d,3u} r18={6d} r19={1d,1u} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} 
;;    total ref usage 529{458d,71u,0e} in 45{39 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 D.2369+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [99])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":15:11 1159 {stack_protect_set_1_di}
     (nil))
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])
        (const_int 0 [0])) "test1.c":18:6 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S4 A64])
        (const_int 1 [0x1])) "test1.c":19:6 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":20:6 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 0 ax [89])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22:5 210 {*adddi_1}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [89])) "test1.c":22:5 74 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 0 ax [90])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7932e33a6990 *.LC1>)) "test1.c":22:5 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "test1.c":22:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7932e33a6990 *.LC1>)
        (nil)))
(insn 13 12 14 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":22:5 77 {*movqi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7932e32bed00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":22:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 0 ax [orig:82 a.0_1 ] [82])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])) "test1.c":23:5 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:82 a.0_1 ] [82])) "test1.c":23:5 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 0 ax [91])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":23:5 74 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [91])) "test1.c":23:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
        (nil)))
(insn 19 18 20 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":23:5 77 {*movqi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":23:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 21 20 22 2 (set (reg:SI 0 ax [orig:83 b.1_2 ] [83])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S4 A64])) "test1.c":24:5 75 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:83 b.1_2 ] [83])) "test1.c":24:5 75 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 0 ax [92])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":24:5 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "test1.c":24:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
        (nil)))
(insn 25 24 26 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":24:5 77 {*movqi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":24:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 27 26 30 2 (set (reg:SI 0 ax [orig:84 a.2_3 ] [84])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])) "test1.c":26:9 75 {*movsi_internal}
     (nil))
(insn 30 27 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:84 a.2_3 ] [84])
            (const_int 0 [0]))) "test1.c":26:7 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 31 30 32 2 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "test1.c":26:7 806 {*jcc}
     (nil)
 -> 37)
(note 32 31 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg:DI 0 ax [93])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7932e33a6a20 *.LC2>)) "test1.c":27:9 74 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "test1.c":27:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7932e33a6a20 *.LC2>)
        (nil)))
(insn 35 34 36 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":27:9 77 {*movqi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":27:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(code_label 37 36 38 4 4 (nil) [1 uses])
(note 38 37 76 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 76 38 77 4 (set (pc)
        (label_ref 51)) "test1.c":29:10 807 {jump}
     (nil)
 -> 51)
(barrier 77 76 55)
(code_label 55 77 41 5 6 (nil) [1 uses])
(note 41 55 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (parallel [
            (set (reg:DI 2 cx [94])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (nil))
(insn 43 42 44 5 (parallel [
            (set (reg:DI 1 dx [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (nil))
(insn 44 43 45 5 (parallel [
            (set (reg:DI 4 si [96])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (nil))
(insn 45 44 49 5 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (nil))
(insn 49 45 50 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "test1.c":36:9 74 {*movdi_internal}
     (nil))
(call_insn 50 49 51 5 (call (mem:QI (symbol_ref:DI ("FB") [flags 0x3]  <function_decl 0x7932e33a3700 FB>) [0 FB S1 A8])
        (const_int 0 [0])) "test1.c":36:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(code_label 51 50 52 6 5 (nil) [1 uses])
(note 52 51 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 6 (set (reg:SI 1 dx [orig:85 i.3_4 ] [85])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])) "test1.c":29:12 75 {*movsi_internal}
     (nil))
(insn 54 53 56 6 (set (reg:SI 0 ax [orig:86 n.4_5 ] [86])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [2 n+0 S4 A32])) "test1.c":29:12 75 {*movsi_internal}
     (nil))
(insn 56 54 57 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:85 i.3_4 ] [85])
            (reg:SI 0 ax [orig:86 n.4_5 ] [86]))) "test1.c":29:12 11 {*cmpsi_1}
     (nil))
(jump_insn 57 56 58 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "test1.c":29:12 806 {*jcc}
     (nil)
 -> 55)
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 66 7 (set (reg:SI 0 ax [orig:87 _21 ] [87])
        (const_int 0 [0])) "<built-in>":0:0 75 {*movsi_internal}
     (nil))
(insn 66 59 67 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -8 [0xfffffffffffffff8])) [3 D.2369+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [100]))
        ]) "test1.c":39:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 67 66 74 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "test1.c":39:1 806 {*jcc}
     (nil)
 -> 70)
(note 74 67 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 68 74 69 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7932e33b1b00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "test1.c":39:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 69 68 70)
(code_label 70 69 75 9 8 (nil) [1 uses])
(note 75 70 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 72 75 78 9 (use (reg/i:SI 0 ax)) "test1.c":39:1 -1
     (nil))
(note 78 72 0 NOTE_INSN_DELETED)
