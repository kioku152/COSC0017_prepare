
;; Function FB (FB, funcdef_no=0, decl_uid=2348, cgraph_uid=1, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r86,l0) best SIREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a3(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a8(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a13(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a14(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 40(l0): point = 0
   Insn 35(l0): point = 2
   Insn 34(l0): point = 4
   Insn 33(l0): point = 6
   Insn 32(l0): point = 8
   Insn 31(l0): point = 10
   Insn 30(l0): point = 12
   Insn 29(l0): point = 14
   Insn 28(l0): point = 16
   Insn 27(l0): point = 18
   Insn 26(l0): point = 20
   Insn 25(l0): point = 22
   Insn 24(l0): point = 24
   Insn 23(l0): point = 26
   Insn 22(l0): point = 28
   Insn 21(l0): point = 30
   Insn 20(l0): point = 32
   Insn 19(l0): point = 34
   Insn 18(l0): point = 36
   Insn 17(l0): point = 38
   Insn 16(l0): point = 40
   Insn 15(l0): point = 42
   Insn 14(l0): point = 44
   Insn 13(l0): point = 46
   Insn 12(l0): point = 48
   Insn 11(l0): point = 50
   Insn 10(l0): point = 52
   Insn 9(l0): point = 54
   Insn 5(l0): point = 56
   Insn 4(l0): point = 58
   Insn 3(l0): point = 60
   Insn 2(l0): point = 62
 a0(r100): [3..4]
 a1(r89): [3..6]
 a2(r88): [7..8]
 a3(r99): [9..10]
 a4(r98): [13..14]
 a5(r87): [13..16]
 a6(r97): [17..18]
 a7(r96): [25..26]
 a8(r86): [29..30]
 a9(r95): [31..32]
 a10(r94): [35..36]
 a11(r85): [35..38]
 a12(r84): [39..40]
 a13(r83): [39..44]
 a14(r93): [41..42]
 a15(r92): [45..46]
 a16(r91): [49..50]
 a17(r82): [49..52]
 a18(r90): [53..54]
Compressing live ranges: from 65 to 28 - 43%
Ranges after the compression:
 a0(r100): [0..1]
 a1(r89): [0..1]
 a2(r88): [2..3]
 a3(r99): [4..5]
 a4(r98): [6..7]
 a5(r87): [6..7]
 a6(r97): [8..9]
 a7(r96): [10..11]
 a8(r86): [12..13]
 a9(r95): [14..15]
 a10(r94): [16..17]
 a11(r85): [16..17]
 a12(r84): [18..19]
 a13(r83): [18..21]
 a14(r93): [20..21]
 a15(r92): [22..23]
 a16(r91): [24..25]
 a17(r82): [24..25]
 a18(r90): [26..27]
  pref0:a7(r96)<-hr5@1500
  pref1:a8(r86)<-hr4@1500
  regions=1, blocks=3, points=28
    allocnos=19 (big 0), copies=0, conflicts=0, ranges=19
Disposition:
   17:r82  l0     1   13:r83  l0     1   12:r84  l0     0   11:r85  l0     1
    8:r86  l0     0    5:r87  l0     1    2:r88  l0     0    1:r89  l0     1
   18:r90  l0     0   16:r91  l0     0   15:r92  l0     0   14:r93  l0     0
   10:r94  l0     0    9:r95  l0     0    7:r96  l0     0    6:r97  l0     0
    4:r98  l0     0    3:r99  l0     0    0:r100 l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


FB

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,1u} r1={2d,1u} r2={2d,1u} r4={3d,2u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={3d} r18={1d} r19={1d,16u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} 
;;    total ref usage 158{110d,48u,0e} in 32{31 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])
        (reg:DI 5 di [ t ])) "test1.c":5:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ t ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])
        (reg:DI 4 si [ b ])) "test1.c":5:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ b ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])
        (reg:DI 1 dx [ a ])) "test1.c":5:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ a ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])
        (reg:DI 2 cx [ i ])) "test1.c":5:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ i ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":6:8 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 82 [ _1 ])
        (mem:SI (reg/f:DI 90) [2 *b_10(D)+0 S4 A32])) "test1.c":6:8 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])) "test1.c":6:7 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:DI 91) [2 *t_11(D)+0 S4 A32])
        (reg:SI 82 [ _1 ])) "test1.c":6:7 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
            (nil))))
(insn 13 12 14 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])) "test1.c":7:8 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 83 [ _2 ])
        (mem:SI (reg/f:DI 92) [2 *a_13(D)+0 S4 A32])) "test1.c":7:8 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":7:11 74 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 84 [ _3 ])
        (mem:SI (reg/f:DI 93) [2 *b_10(D)+0 S4 A32])) "test1.c":7:11 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg:SI 85 [ _4 ])
                (plus:SI (reg:SI 83 [ _2 ])
                    (reg:SI 84 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":7:10 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 84 [ _3 ])
        (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 18 17 19 2 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":7:7 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem:SI (reg/f:DI 94) [2 *b_10(D)+0 S4 A32])
        (reg:SI 85 [ _4 ])) "test1.c":7:7 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 b+0 S8 A64])) "test1.c":8:5 74 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 86 [ _5 ])
        (mem:SI (reg/f:DI 95) [2 *b_10(D)+0 S4 A32])) "test1.c":8:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg:SI 86 [ _5 ])) "test1.c":8:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":8:5 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 96)) "test1.c":8:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
            (nil))))
(insn 25 24 26 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":8:5 77 {*movqi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":8:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 27 26 28 2 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 t+0 S8 A64])) "test1.c":9:8 74 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 87 [ _6 ])
        (mem:SI (reg/f:DI 97) [2 *t_11(D)+0 S4 A32])) "test1.c":9:8 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 29 28 30 2 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 a+0 S8 A64])) "test1.c":9:7 74 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem:SI (reg/f:DI 98) [2 *a_13(D)+0 S4 A32])
        (reg:SI 87 [ _6 ])) "test1.c":9:7 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (expr_list:REG_DEAD (reg:SI 87 [ _6 ])
            (nil))))
(insn 31 30 32 2 (set (reg/f:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])) "test1.c":10:8 74 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 88 [ _7 ])
        (mem:SI (reg/f:DI 99) [2 *i_17(D)+0 S4 A32])) "test1.c":10:8 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (nil)))
(insn 33 32 34 2 (parallel [
            (set (reg:SI 89 [ _8 ])
                (plus:SI (reg:SI 88 [ _7 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":10:10 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 34 33 35 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 i+0 S8 A64])) "test1.c":10:7 74 {*movdi_internal}
     (nil))
(insn 35 34 40 2 (set (mem:SI (reg/f:DI 100) [2 *i_17(D)+0 S4 A32])
        (reg:SI 89 [ _8 ])) "test1.c":10:7 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (expr_list:REG_DEAD (reg:SI 89 [ _8 ])
            (nil))))
(insn 40 35 0 2 (const_int 0 [0]) "test1.c":11:5 843 {nop}
     (nil))

;; Function main (main, funcdef_no=1, decl_uid=2350, cgraph_uid=2, symbol_order=1)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 1 }
Removing SCRATCH to p99 in insn #3 (nop 2)
rescanning insn with uid = 3.
Removing SCRATCH to p100 in insn #66 (nop 3)
rescanning insn with uid = 66.
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 68.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)

Pass 0 for finding pseudo/allocno costs

    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r96,l0) best SIREG, allocno GENERAL_REGS
    r95: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r95,l0) best DREG, allocno GENERAL_REGS
    r94: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r94,l0) best CREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r89,l0) best SIREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r83,l0) best SIREG, allocno GENERAL_REGS
    r82: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r82,l0) best SIREG, allocno GENERAL_REGS

  a0(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a2(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a6(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a8(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a9(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a10(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a12(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a14(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a16(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a17(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000

   Insn 72(l0): point = 0
   Insn 71(l0): point = 2
   Insn 68(l0): point = 5
   Insn 67(l0): point = 8
   Insn 66(l0): point = 10
   Insn 62(l0): point = 12
   Insn 59(l0): point = 14
   Insn 50(l0): point = 17
   Insn 49(l0): point = 19
   Insn 48(l0): point = 21
   Insn 47(l0): point = 23
   Insn 46(l0): point = 25
   Insn 45(l0): point = 27
   Insn 44(l0): point = 29
   Insn 43(l0): point = 31
   Insn 42(l0): point = 33
   Insn 57(l0): point = 36
   Insn 56(l0): point = 38
   Insn 54(l0): point = 40
   Insn 53(l0): point = 42
   Insn 76(l0): point = 45
   Insn 36(l0): point = 48
   Insn 35(l0): point = 50
   Insn 34(l0): point = 52
   Insn 33(l0): point = 54
   Insn 31(l0): point = 57
   Insn 30(l0): point = 59
   Insn 27(l0): point = 61
   Insn 26(l0): point = 63
   Insn 25(l0): point = 65
   Insn 24(l0): point = 67
   Insn 23(l0): point = 69
   Insn 22(l0): point = 71
   Insn 21(l0): point = 73
   Insn 20(l0): point = 75
   Insn 19(l0): point = 77
   Insn 18(l0): point = 79
   Insn 17(l0): point = 81
   Insn 16(l0): point = 83
   Insn 15(l0): point = 85
   Insn 14(l0): point = 87
   Insn 13(l0): point = 89
   Insn 12(l0): point = 91
   Insn 11(l0): point = 93
   Insn 10(l0): point = 95
   Insn 9(l0): point = 97
   Insn 8(l0): point = 99
   Insn 7(l0): point = 101
   Insn 6(l0): point = 103
   Insn 3(l0): point = 105
 a0(r88): [8..12] [3..4]
 a1(r100): [10..10]
 a2(r87): [13..14]
 a3(r86): [39..40]
 a4(r85): [39..42]
 a5(r97): [20..27]
 a6(r96): [22..29]
 a7(r95): [24..31]
 a8(r94): [26..33]
 a9(r93): [53..54]
 a10(r84): [60..61]
 a11(r92): [68..69]
 a12(r83): [72..73]
 a13(r91): [80..81]
 a14(r82): [84..85]
 a15(r90): [92..93]
 a16(r89): [96..97]
 a17(r99): [105..105]
Compressing live ranges: from 108 to 28 - 25%
Ranges after the compression:
 a0(r88): [0..4]
 a1(r100): [3..3]
 a2(r87): [5..6]
 a3(r86): [9..10]
 a4(r85): [9..10]
 a5(r97): [7..8]
 a6(r96): [7..8]
 a7(r95): [7..8]
 a8(r94): [7..8]
 a9(r93): [11..12]
 a10(r84): [13..14]
 a11(r92): [15..16]
 a12(r83): [17..18]
 a13(r91): [19..20]
 a14(r82): [21..22]
 a15(r90): [23..24]
 a16(r89): [25..26]
 a17(r99): [27..27]
  pref0:a5(r97)<-hr5@1500
  pref1:a6(r96)<-hr4@1500
  pref2:a7(r95)<-hr1@1500
  pref3:a8(r94)<-hr2@1500
  pref4:a9(r93)<-hr5@1500
  pref5:a11(r92)<-hr5@1500
  pref6:a13(r91)<-hr5@1500
  pref7:a15(r90)<-hr5@1500
  pref8:a16(r89)<-hr4@1500
  pref9:a0(r88)<-hr0@1500
  pref10:a12(r83)<-hr4@1500
  pref11:a14(r82)<-hr4@1500
  regions=1, blocks=10, points=28
    allocnos=18 (big 0), copies=0, conflicts=0, ranges=18
Disposition:
   14:r82  l0     0   12:r83  l0     0   10:r84  l0     0    4:r85  l0     1
    3:r86  l0     0    2:r87  l0     0    0:r88  l0     0   16:r89  l0     0
   15:r90  l0     0   13:r91  l0     0   11:r92  l0     0    9:r93  l0     0
    8:r94  l0     2    7:r95  l0     1    6:r96  l0     4    5:r97  l0     0
   17:r99  l0     0    1:r100 l0     1
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={12d,6u} r1={8d,1u} r2={8d,1u} r4={11d,4u} r5={12d,5u} r6={1d,9u} r7={1d,15u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,8u} r17={15d,3u} r18={6d} r19={1d,24u} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={7d} r37={7d} r38={6d} r39={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r99={1d} r100={1d} 
;;    total ref usage 556{464d,92u,0e} in 50{44 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 D.2369+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 99)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":15:11 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 99)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])
        (const_int 0 [0])) "test1.c":18:6 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S4 A64])
        (const_int 1 [0x1])) "test1.c":19:6 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
        (const_int 1 [0x1])) "test1.c":20:6 75 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (parallel [
            (set (reg:DI 89)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":22:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 89)) "test1.c":22:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 11 10 12 2 (set (reg:DI 90)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7932e33a6990 *.LC1>)) "test1.c":22:5 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 90)) "test1.c":22:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7932e33a6990 *.LC1>)
            (nil))))
(insn 13 12 14 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":22:5 77 {*movqi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7932e32bed00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "test1.c":22:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 82 [ a.0_1 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])) "test1.c":23:5 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (reg:SI 82 [ a.0_1 ])) "test1.c":23:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ a.0_1 ])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":23:5 74 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg:DI 91)) "test1.c":23:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
            (nil))))
(insn 19 18 20 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":23:5 77 {*movqi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":23:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 21 20 22 2 (set (reg:SI 83 [ b.1_2 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 b+0 S4 A64])) "test1.c":24:5 75 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (reg:SI 83 [ b.1_2 ])) "test1.c":24:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ b.1_2 ])
        (nil)))
(insn 23 22 24 2 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)) "test1.c":24:5 74 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:DI 5 di)
        (reg:DI 92)) "test1.c":24:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7932e33a6510 *.LC0>)
            (nil))))
(insn 25 24 26 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":24:5 77 {*movqi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":24:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 27 26 30 2 (set (reg:SI 84 [ a.2_3 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -28 [0xffffffffffffffe4])) [2 a+0 S4 A32])) "test1.c":26:9 75 {*movsi_internal}
     (nil))
(insn 30 27 31 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 84 [ a.2_3 ])
            (const_int 0 [0]))) "test1.c":26:7 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 84 [ a.2_3 ])
        (nil)))
(jump_insn 31 30 32 2 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "test1.c":26:7 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 37)
(note 32 31 33 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 3 (set (reg:DI 93)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7932e33a6a20 *.LC2>)) "test1.c":27:9 74 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (reg:DI 5 di)
        (reg:DI 93)) "test1.c":27:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7932e33a6a20 *.LC2>)
            (nil))))
(insn 35 34 36 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "test1.c":27:9 77 {*movqi_internal}
     (nil))
(call_insn 36 35 37 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7932e32be100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "test1.c":27:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(code_label 37 36 38 4 4 (nil) [1 uses])
(note 38 37 76 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 76 38 77 4 (set (pc)
        (label_ref 51)) "test1.c":29:10 807 {jump}
     (nil)
 -> 51)
(barrier 77 76 55)
(code_label 55 77 41 5 6 (nil) [1 uses])
(note 41 55 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (parallel [
            (set (reg:DI 94)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 43 42 44 5 (parallel [
            (set (reg:DI 95)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 44 43 45 5 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 45 44 46 5 (parallel [
            (set (reg:DI 97)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "test1.c":36:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 46 45 47 5 (set (reg:DI 2 cx)
        (reg:DI 94)) "test1.c":36:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(insn 47 46 48 5 (set (reg:DI 1 dx)
        (reg:DI 95)) "test1.c":36:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(insn 48 47 49 5 (set (reg:DI 4 si)
        (reg:DI 96)) "test1.c":36:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 49 48 50 5 (set (reg:DI 5 di)
        (reg:DI 97)) "test1.c":36:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(call_insn 50 49 51 5 (call (mem:QI (symbol_ref:DI ("FB") [flags 0x3]  <function_decl 0x7932e33a3700 FB>) [0 FB S1 A8])
        (const_int 0 [0])) "test1.c":36:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(code_label 51 50 52 6 5 (nil) [1 uses])
(note 52 51 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 6 (set (reg:SI 85 [ i.3_4 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])) "test1.c":29:12 75 {*movsi_internal}
     (nil))
(insn 54 53 56 6 (set (reg:SI 86 [ n.4_5 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 n+0 S4 A32])) "test1.c":29:12 75 {*movsi_internal}
     (nil))
(insn 56 54 57 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 85 [ i.3_4 ])
            (reg:SI 86 [ n.4_5 ]))) "test1.c":29:12 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 86 [ n.4_5 ])
        (expr_list:REG_DEAD (reg:SI 85 [ i.3_4 ])
            (nil))))
(jump_insn 57 56 58 6 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "test1.c":29:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 55)
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 62 7 (set (reg:SI 87 [ _21 ])
        (const_int 0 [0])) "<built-in>":0:0 75 {*movsi_internal}
     (nil))
(insn 62 59 66 7 (set (reg:SI 88 [ <retval> ])
        (reg:SI 87 [ _21 ])) "<built-in>":0:0 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ _21 ])
        (nil)))
(insn 66 62 67 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [3 D.2369+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 100))
        ]) "test1.c":39:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 100)
        (nil)))
(jump_insn 67 66 74 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 70)
            (pc))) "test1.c":39:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 70)
(note 74 67 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 68 74 69 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7932e33b1b00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "test1.c":39:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 69 68 70)
(code_label 70 69 75 9 8 (nil) [1 uses])
(note 75 70 71 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 71 75 72 9 (set (reg/i:SI 0 ax)
        (reg:SI 88 [ <retval> ])) "test1.c":39:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ <retval> ])
        (nil)))
(insn 72 71 0 9 (use (reg/i:SI 0 ax)) "test1.c":39:1 -1
     (nil))
